apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lRTVFmNDF3UEZUTTd3YzNKNGE0RFNCVEFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSXpNRFl3TmpFeE1qazFNVm9YRFRJMApNRFl3TlRFeE1qazFNVm93R3pFWk1CY0dBMVVFQXhNUVpXeGhjM1JwWTNObFlYSmphQzFqWVRDQ0FTSXdEUVlKCktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtZbWZJckFrc1llanlRc3ZXcUIvMUkrbTRpWi9HTWQKcEhvbHVxSGw2WDBwc2FTTnVNdHJzRHRHUEVJUjRRWjZZb0R2cjlTVXUxVDF2bU0wRkthTFc5RTJoazlKbkpTZQppdm4wcU9XSjIva1BuQzl4NmlVb1d2aEhIQUJMejJXVElJbVB2N1pHME1WbmZVUlZJWUhZKzFrOTh0Y245bXZNClU2Q1B1VitUZUowTWNjbi9XM3dCQTkyYStrSG15S1JlNGJ5N3FoakFuQUJTNWRnWlJySnorMGV5Njh6WTIxa2QKaVMwODRkU0RKRXVEMmhFZFFQa3NoY25YWkFuM1Z4eHRxU1VtamI5MmRlSlB2WVpMNDd3NXEwc0RTRk5iNHgyTgo0UU9qTzN0T2NxbUpaTHEzRzRIMlVqQzFHSHVQMi8reTNDR3FqdmIvc0RNdGd6K3RxR2I1VElzQ0F3RUFBYU5oCk1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdLa01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXQkJSR1NZNTkvWDh3N052end1OG5IM1N4NXAzNgpVVEFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBbG5xbkxxc0g3anFxVk9ocHRpSmFZVlZZelZQM1Q4b1ZKZjNYCll5TFlNVDN6eDJmeklMVi9xNEQ0enNxM3NTMXlHcFd0Qk1SdzM0VVgrbU5tb3RqMEFnS1VpTWR6dFQzL0ZxSjYKUExYRTNNZjZRaHhrL1Zmdnlwam5pd0NHZ0doL09YcU9sUGZHR1E4Uk15UDFieGkyOVNVSGltKzBaQnNIUUJTOApTSEthQlFLMXRrc0tIYW4wUjA2N2gySHJxMEdMalAxc2J5UUtEclN5QStVQktzcnVKOGwxWm9OdlBuRW5QMEJ0CmlTNVlMNWw0UGdzdWdjSmNvR25IL2lNM2huc05NamhGUkJGVHl6N0gxNURET0JCYzZTcDVNL09wY1pKZmd3enUKa2NlR1Q4bkYwSlJZMDdyTVRibXRLYVY3YVV6NG4yQW5uelpqTVJ6ekY5UTF6Ukc2MFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURrekNDQW51Z0F3SUJBZ0lRVHRkdzFzTUZ0SFNYV25kUnN2Q0NlREFOQmdrcWhraUc5dzBCQVFzRkFEQWIKTVJrd0Z3WURWUVFERXhCbGJHRnpkR2xqYzJWaGNtTm9MV05oTUI0WERUSXpNRFl3TmpFeE1qazFNVm9YRFRJMApNRFl3TlRFeE1qazFNVm93SHpFZE1Cc0dBMVVFQXhNVVpXeGhjM1JwWTNObFlYSmphQzF0WVhOMFpYSXdnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzdlaUtPYXIyaVg1QzRXUmVnMkswYkxBRXUKNEx3Smk5Y3RwZVc4bHZCemY0VERmTERKdUs5Wm1oV001OHhGcko5bUpnZUgrUzk2ajFPUU0wd2ZvclBsNHF0OApVRThySkpIcEVCWG5qenpHY1o0cmxZVkx3VXYyQ2ZReGVIeFpBUng2SThnTmZVQmhSaDJkZjR5MHBjQ0pHNGhtCk9YQXVWd2U3QWo5dHJCdWdqZHptZnNFSHJQSktIbGNlTk9rVTB0a3IzR3Y5ZkF4VW05SzM1QllDeVgzbVdGeUMKWmo1TUV0QllVcnBlUGlxaVl3emdyMnhHa0NEaHlDT2JEN1I4amVXZ212b3lwWm05SHl0NkdxQS9uMHJ4RUtqbwp1U3ZnR3VYNDZsWUR6NTFEMUdFT3JDQkRPS3VVRzBkT0lDUm1SaktLb0xsd1Z4TkxjbFFtV3hpZVdhUFBBZ01CCkFBR2pnYzR3Z2Nzd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGRVpKam4zOWZ6RHMyL1BDN3ljZgpkTEhtbmZwUk1Hc0dBMVVkRVFSa01HS0NGR1ZzWVhOMGFXTnpaV0Z5WTJndGJXRnpkR1Z5Z2lKbGJHRnpkR2xqCmMyVmhjbU5vTFcxaGMzUmxjaTVsYkdGemRHbGpjMlZoY21Ob2dpWmxiR0Z6ZEdsamMyVmhjbU5vTFcxaGMzUmwKY2k1bGJHRnpkR2xqYzJWaGNtTm9Mbk4yWXpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQVptV015SjgwODBEdQpQQ3BIR2NoNGdHa3FiWFZUU3padHNnYUUxZHZKTmRFV0Nsb3RGVjE4dTBHQnovaXNPR2V1c2hneGsrZkdkZ1ljCk9ZckRHQytOcHljZm9IcFRQL1ZpSFRnbHdvM3lCSnlwbTlpb3ExU1k5QXNmeUtGS0ZJZDFtRVRNOGFOOU5vL1IKTXhadGxWazZqajIvM2c5cGRadWxQVHpEZHowYm5RK2Jmc2NqQ1RIQ1FJM0hiQ2ZOZGE5R0VxcWZzSzFDUXp2ZwpoTWovN01Yd1lUS08xamhDMW5PcVkxYzhmNHA2bjFXaklMbUFHMTl6aE9GVHFXaTdBaEY3azhsSXN3TVFpVmQ1Ck9JOVZ1YkhodU0wZDNhUzQyQlRRS1hXZHdhYkR0WVUvbmRHeDVvNnJrNUtNbkpFK1dzYkNmdzRjQU4ycDZGY0EKaklkdXJDVXUvZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdTNvaWptcTlvbCtRdUZrWG9OaXRHeXdCTHVDOENZdlhMYVhsdkpid2MzK0V3M3l3CnliaXZXWm9Wak9mTVJheWZaaVlIaC9rdmVvOVRrRE5NSDZLejVlS3JmRkJQS3lTUjZSQVY1NDg4eG5HZUs1V0YKUzhGTDlnbjBNWGg4V1FFY2VpUElEWDFBWVVZZG5YK010S1hBaVJ1SVpqbHdMbGNIdXdJL2Jhd2JvSTNjNW43QgpCNnp5U2g1WEhqVHBGTkxaSzl4ci9Yd01WSnZTdCtRV0FzbDk1bGhjZ21ZK1RCTFFXRks2WGo0cW9tTU00SzlzClJwQWc0Y2dqbXcrMGZJM2xvSnI2TXFXWnZSOHJlaHFnUDU5SzhSQ282TGtyNEJybCtPcFdBOCtkUTlSaERxd2cKUXppcmxCdEhUaUFrWmtZeWlxQzVjRmNUUzNKVUpsc1lubG1qendJREFRQUJBb0lCQUYxS2RZK3hCaFNhd1lVNgpzRXRXQnk0U1E3UjBHSjRYZkVnMjJZOXkvTXc4bEhCQ3lDWlpSTWl0cURPcDFUaUdvZnRPeVVpY2MwZmxzb3Q3Ck8xSXl3SnFRcFEwRFdhSDZYTEZCVStVYW5mK1I0a2VGN0FLNmVYWkJsY1pZVW1objZTZk9UbXFIL1ZWcWNxcEIKSWw5eWE5RE9acDJYejM3L3g5VURWVlRaNUJXTUtGSmxlQkNwczl0bGNreWY0Q0FDOWZ2MjBnTndLZkVHNm1rWApBTXFrN1llc1pSZmlvdlQ3Wjd4V08zeTlzYmVwSWpZeUl6Q1RleEdpOWFncmVSVm9EODh1bDhNRllESVlCUTdPCjUrSEdiV3RnbmptajBBbUtKRi81a1Zkek1MU0Y5U25SZUhia3l3QytzaCt3TWg4dGo4U2VBOU9DcjdkY0RZZ3QKME5BcGhjRUNnWUVBMUlhRWRQMzV4cFVaZnd0c3g4TWlXRHcxVmxTRitMZnFMbnBiOVpRMFF6bGdpL043cnhoNQpQTU5aYVBMVkZiZVk3Rm5XZWtZU2Y4RW5sZy9Bb2VoQVhIdEFBbG14MlRtOEdJN0N0M1lrRlJMY2xVbVhtL0RlCjFVUEkwVUFtUzFPcmFML3lOSmlidW14RzVzbHFmUkIzSU9kNDFoTUh4MFlaaHRnU3lleUkwT2tDZ1lFQTRkUGoKKyt2TEwrLzZGNVFKVDBIbkYzbEZNbWQ1NlljRmc1VzR4L2Q0bjNhWnRGUHpQQmNTRlFNN3dyK1ZUZVdHQWNLeApMc1VmNzZZWEo0Q3YzZ3FEVUVHSWdYVndNYjV5bjVFWi8vUmEyQWc3T1NCUzhNS0pPdXhZN2FsNFZlMlloT0tBCndXNXBEaUFQZ3RuSXN1MHdNaDVpZ2V0L2tHU1ZWVXVPU2dBam0vY0NnWUI5U2tCVWFGWVVTRm9ibDdTdG45QmoKakRzMWhlYmxWaWRzOXgyM2pZT3lEZVZwSEVYU1YrOUJiemtLc2Y0Rks1T3Y0dGFhaHl6b3ZBcUdZUXNEYUZScApNUS92VXNtU2NvTDlSMHhycys1WnJpRDBzY243V09sRmVReXVyODdqb1pQdjBSa05BTnJ0OEY5c04xbmNHUlRpCkJSUXJ3RlJabW0zNkhQQVdzcWVGNFFLQmdRREFqaFVDZEo3UEpEZENMWWIybnNIMklRQmdweHlyZythdXVWWlMKbzIrbHdOSDBrZlIvazBobXhGZ0xpYUk4Um01S1NBRWVXUlVQR2JiNmh0N3VYRloxY3p0NjczRVg2VVVCVEE4NApVTm01Qk9QQ3BRNHpuaHkzTWxudFpDaG9WR3hOT25rQTlpejd6MWlLZ1RxQlhuOU83TnVmM2ZicVh1bDZUaTlvClo4LzFKd0tCZ1FEUVd5WEpPQlp0RTBJZGswZW9iQ04zWGlIVG5XaU03TTZia0NIR0RjbHoxQ1E3OGxVWXRsc0cKSnFvVk9CYmN6QlZaNmtKeHUwUXNiNU4zblZFM0g0d3VGSEZCWGdjTVhNcFc5UzRtazZTMUlnZ0Q1L0RGaHI0Uwp0b2pCWFpuV0pqVEZtQnlpRUI5bHNEeEowc3JjZlNmYXVWRGpRb1JFV05LdjE3KzI2RUYwbXc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  labels:
    app: elasticsearch-master
    chart: elasticsearch
    heritage: Helm
    release: elasticsearch
  name: elasticsearch-master-certs
type: kubernetes.io/tls
---
apiVersion: v1
data:
  password: b1ZtNTVQb0NQUWw4YzFQYQ==
  username: ZWxhc3RpYw==
kind: Secret
metadata:
  labels:
    app: elasticsearch-master
    chart: elasticsearch
    heritage: Helm
    release: elasticsearch
  name: elasticsearch-master-credentials
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch-master
    chart: elasticsearch
    heritage: Helm
    release: elasticsearch
  name: elasticsearch-master
spec:
  ports:
  - name: http
    port: 9200
    protocol: TCP
  - name: transport
    port: 9300
    protocol: TCP
  publishNotReadyAddresses: false
  selector:
    app: elasticsearch-master
    chart: elasticsearch
    release: elasticsearch
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  labels:
    app: elasticsearch-master
    chart: elasticsearch
    heritage: Helm
    release: elasticsearch
  name: elasticsearch-master-headless
spec:
  clusterIP: None
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
  publishNotReadyAddresses: true
  selector:
    app: elasticsearch-master
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    esMajorVersion: "8"
  labels:
    app: elasticsearch-master
    chart: elasticsearch
    heritage: Helm
    release: elasticsearch
  name: elasticsearch-master
spec:
  podManagementPolicy: Parallel
  replicas: 5
  selector:
    matchLabels:
      app: elasticsearch-master
  serviceName: elasticsearch-master-headless
  template:
    metadata:
      annotations: null
      labels:
        app: elasticsearch-master
        chart: elasticsearch
        release: elasticsearch
      name: elasticsearch-master
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - elasticsearch-master
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: true
      containers:
      - env:
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: cluster.initial_master_nodes
          value: elasticsearch-master-0,elasticsearch-master-1,elasticsearch-master-2,elasticsearch-master-3,elasticsearch-master-4,
        - name: node.roles
          value: master,data,data_content,data_hot,data_warm,data_cold,ingest,ml,remote_cluster_client,transform,
        - name: discovery.seed_hosts
          value: elasticsearch-master-headless
        - name: cluster.name
          value: elasticsearch
        - name: network.host
          value: 0.0.0.0
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: elasticsearch-master-credentials
        - name: xpack.security.enabled
          value: "true"
        - name: xpack.security.transport.ssl.enabled
          value: "true"
        - name: xpack.security.http.ssl.enabled
          value: "true"
        - name: xpack.security.transport.ssl.verification_mode
          value: certificate
        - name: xpack.security.transport.ssl.key
          value: /usr/share/elasticsearch/config/certs/tls.key
        - name: xpack.security.transport.ssl.certificate
          value: /usr/share/elasticsearch/config/certs/tls.crt
        - name: xpack.security.transport.ssl.certificate_authorities
          value: /usr/share/elasticsearch/config/certs/ca.crt
        - name: xpack.security.http.ssl.key
          value: /usr/share/elasticsearch/config/certs/tls.key
        - name: xpack.security.http.ssl.certificate
          value: /usr/share/elasticsearch/config/certs/tls.crt
        - name: xpack.security.http.ssl.certificate_authorities
          value: /usr/share/elasticsearch/config/certs/ca.crt
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
        imagePullPolicy: IfNotPresent
        name: elasticsearch
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - |
              set -e

              # Exit if ELASTIC_PASSWORD in unset
              if [ -z "${ELASTIC_PASSWORD}" ]; then
                echo "ELASTIC_PASSWORD variable is missing, exiting"
                exit 1
              fi

              # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
              # Once it has started only check that the node itself is responding
              START_FILE=/tmp/.es_start_file

              # Disable nss cache to avoid filling dentry cache when calling curl
              # This is required with Elasticsearch Docker using nss < 3.52
              export NSS_SDB_USE_CACHE=no

              http () {
                local path="${1}"
                local args="${2}"
                set -- -XGET -s

                if [ "$args" != "" ]; then
                  set -- "$@" $args
                fi

                set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"

                curl --output /dev/null -k "$@" "https://127.0.0.1:9200${path}"
              }

              if [ -f "${START_FILE}" ]; then
                echo 'Elasticsearch is already running, lets check the node is healthy'
                HTTP_CODE=$(http "/" "-w %{http_code}")
                RC=$?
                if [[ ${RC} -ne 0 ]]; then
                  echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with RC ${RC}"
                  exit ${RC}
                fi
                # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                if [[ ${HTTP_CODE} == "200" ]]; then
                  exit 0
                elif [[ ${HTTP_CODE} == "503" && "8" == "6" ]]; then
                  exit 0
                else
                  echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} https://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                  exit 1
                fi

              else
                echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                  touch ${START_FILE}
                  exit 0
                else
                  echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                  exit 1
                fi
              fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 1000m
            memory: 2Gi
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: elasticsearch-master
        - mountPath: /usr/share/elasticsearch/config/certs
          name: elasticsearch-certs
          readOnly: true
      enableServiceLinks: true
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
        imagePullPolicy: IfNotPresent
        name: configure-sysctl
        resources: {}
        securityContext:
          privileged: true
          runAsUser: 0
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      terminationGracePeriodSeconds: 120
      volumes:
      - name: elasticsearch-certs
        secret:
          secretName: elasticsearch-master-certs
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-master
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 30Gi
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: elasticsearch-master-pdb
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: elasticsearch-master
---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    helm.sh/hook: test
    helm.sh/hook-delete-policy: hook-succeeded
  name: elasticsearch-sdnbj-test
spec:
  containers:
  - command:
    - sh
    - -c
    - |
      #!/usr/bin/env bash -e
      curl -XGET --fail --cacert /usr/share/elasticsearch/config/certs/tls.crt -u "elastic:${ELASTIC_PASSWORD}" https://'elasticsearch-master:9200/_cluster/health?wait_for_status=green&timeout=1s'
    env:
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: elasticsearch-master-credentials
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
    imagePullPolicy: IfNotPresent
    name: elasticsearch-clvdx-test
    volumeMounts:
    - mountPath: /usr/share/elasticsearch/config/certs
      name: elasticsearch-certs
      readOnly: true
  restartPolicy: Never
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
  volumes:
  - name: elasticsearch-certs
    secret:
      secretName: elasticsearch-master-certs
